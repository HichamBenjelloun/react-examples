{"version":3,"sources":["components/Grid/Square.js","components/Grid/Grid.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["Square","rowIndex","columnIndex","divStyle","backgroundColor","color","className","style","Grid","size","split","map","el","Number","height","width","isInteger","role","aria-label","squareNodes","Array","_","index","key","gridStyle","display","gridTemplateColumns","gridTemplateRows","gridGap","AppContainer","props","handleSubmit","event","preventDefault","setState","sizeInput","current","value","createRef","state","this","onSubmit","type","placeholder","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSA2BeA,EAxBA,SAAC,GAGO,IAFHC,EAEE,EAFFA,SACAC,EACE,EADFA,YACE,GAEbD,EAAWC,GAAe,EACvB,CAAC,QAAS,SACV,CAAC,OAAQ,SAJC,mBAMZC,EAAW,CACbC,gBAPc,KAQdC,MARc,MAWlB,OACI,yBACIC,UAAU,mCACVC,MAAOJ,GAEP,0BAAMG,UAAU,SAASL,EAAzB,KAAqCC,KCgDlCM,G,MAhEF,SAAC,GAEO,IAAD,IADFC,KAEeC,MAAM,KAAKC,KAAI,SAAAC,GAAE,OAAIC,OAAOD,MADzC,mBACTE,EADS,KACDC,EADC,KAGhB,IAAKF,OAAOG,UAAUF,KAAYD,OAAOG,UAAUD,GAC/C,OACI,0BAAMT,UAAU,SACZ,0BAAMW,KAAK,MAAMC,aAAW,WAA5B,UADJ,4CAOR,GAAIJ,GAAU,GAAKC,GAAS,EACxB,OACI,0BAAMT,UAAU,SACZ,0BAAMW,KAAK,MAAMC,aAAW,WAA5B,UADJ,6FAOR,GAAIJ,EAASC,EAAQ,IACjB,OACI,0BAAMT,UAAU,SAAhB,4FAMR,IAAMa,EACF,YAAI,IAAIC,MAAMN,EAASC,IAAQJ,KAC3B,SAACU,EAAGC,GACA,IAAMrB,KAAcqB,EAAQP,GACtBb,EAAcoB,EAAQP,EAE5B,OACI,kBAAC,EAAD,CACIQ,IAAG,UAAKtB,EAAL,YAAiBC,GACpBD,SAAUA,EACVC,YAAaA,OAM3BsB,EAAY,CACdC,QAAS,OACTC,oBAAoB,UAAD,OAAYX,EAAZ,WACnBY,iBAAiB,UAAD,OAAYb,EAAZ,WAChBc,QAAS,OAGb,OACI,yBACItB,UAAU,OACVC,MAAOiB,GAENL,KCjBEU,G,wDAzCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA+BVC,aAAe,SAACC,GACZA,EAAMC,iBAEN,EAAKC,SAAS,CACVzB,KAAM,EAAK0B,UAAUC,QAAQC,SAlCjC,EAAKF,UAAYG,sBACjB,EAAKC,MAAQ,CACT9B,KAAM,OAJK,E,qDAQT,IACCA,EAAQ+B,KAAKD,MAAb9B,KAEP,OACI,yBAAKH,UAAU,OACX,0BACImC,SAAUD,KAAKT,cAEf,+BACI,0BAAMd,KAAK,MAAMC,aAAW,gBAA5B,gBACA,qDACA,2BACIwB,KAAK,OACLC,YAAY,gBACZC,IAAKJ,KAAKL,aAGlB,2BAAOO,KAAK,SAASL,MAAM,YAE/B,kBAAC,EAAD,CAAM5B,KAAMA,S,GA5BDoC,cCMPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD6HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e0e0144.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Square = ({\n                    rowIndex,\n                    columnIndex,\n                }) => {\n    const [backgroundColor, color] =\n        (rowIndex + columnIndex) % 2 ?\n            ['white', 'black'] :\n            ['grey', 'white'];\n\n    const divStyle = {\n        backgroundColor: backgroundColor,\n        color: color,\n    };\n\n    return (\n        <div\n            className=\"Square br2 grow-large hide-child\"\n            style={divStyle}\n        >\n            <span className=\"child\">{rowIndex}, {columnIndex}</span>\n        </div>\n    );\n};\n\nexport default Square;","import React from 'react';\n\nimport Square from './Square';\n\nimport './Grid.css';\n\nconst Grid = ({\n                  size,\n              }) => {\n    const [height, width] = size.split('x').map(el => Number(el));\n\n    if (!Number.isInteger(height) || !Number.isInteger(width)) {\n        return (\n            <span className=\"error\">\n                <span role=\"img\" aria-label=\"warning\">‚ö†</span>Ô∏è\n                Try again with positive integers.\n            </span>\n        );\n    }\n\n    if (height <= 0 || width <= 0) {\n        return (\n            <span className=\"error\">\n                <span role=\"img\" aria-label=\"warning\">‚ö†</span>Ô∏è\n                Elements have been painted in another dimension. Try again with positive integers.\n            </span>\n        );\n    }\n\n    if (height * width > 10_000) {\n        return (\n            <span className=\"error\">\n                ‚ö†Ô∏è Sorry, there are too many elements to paint. Try again with a smaller size.\n            </span>\n        );\n    }\n\n    const squareNodes =\n        [...new Array(height * width)].map(\n            (_, index) => {\n                const rowIndex = ~~(index / width);\n                const columnIndex = index % width;\n\n                return (\n                    <Square\n                        key={`${rowIndex},${columnIndex}`}\n                        rowIndex={rowIndex}\n                        columnIndex={columnIndex}\n                    />\n                )\n            }\n        );\n\n    const gridStyle = {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${width}, 50px)`,\n        gridTemplateRows: `repeat(${height}, 50px)`,\n        gridGap: '5px',\n    };\n\n    return (\n        <div\n            className=\"Grid\"\n            style={gridStyle}\n        >\n            {squareNodes}\n        </div>\n    );\n};\n\nexport default Grid;","import React, {Component, createRef} from 'react';\n\nimport Grid from \"../components/Grid/Grid\";\n\nimport 'tachyons';\n\nclass AppContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.sizeInput = createRef();\n        this.state = {\n            size: '3x3',\n        }\n    }\n\n    render() {\n        const {size} = this.state;\n\n        return (\n            <div className=\"App\">\n                <form\n                    onSubmit={this.handleSubmit}\n                >\n                    <label>\n                        <span role=\"img\" aria-label=\"checkerboard\">üèÅ</span>\n                        <span>Checkerboard size :</span>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Up to 100x100\"\n                            ref={this.sizeInput}\n                        />\n                    </label>\n                    <input type=\"submit\" value=\"update\"/>\n                </form>\n                <Grid size={size}/>\n            </div>\n        )\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        this.setState({\n            size: this.sizeInput.current.value,\n        });\n    }\n}\n\nexport default AppContainer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './containers/AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}