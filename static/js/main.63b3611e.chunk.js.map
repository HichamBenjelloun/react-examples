{"version":3,"sources":["components/Grid/Square.js","components/Grid/SquareRow.js","components/Grid/Grid.js","components/App/App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["Square","parentIndex","index","divStyle","backgroundColor","color","className","style","SquareRow","width","squareNodes","Array","keys","map","cur","key","Grid","size","split","el","Number","height","isNaN","_","App","handleChange","placeholder","value","onChange","AppContainer","props","event","setState","target","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUA2BeA,EAxBA,SAAC,GAGO,IAFHC,EAEE,EAFFA,YACAC,EACE,EADFA,MACE,GAEbD,EAAcC,GAAS,EACpB,CAAC,QAAS,SACV,CAAC,OAAQ,SAJC,mBAMZC,EAAW,CACbC,gBAPc,KAQdC,MARc,MAWlB,OACI,yBACIC,UAAU,mCACVC,MAAOJ,GAEP,0BAAMG,UAAU,SAASL,EAAzB,KAAwCC,KCErCM,EArBG,SAAC,GAGO,IAFHN,EAEE,EAFFA,MACAO,EACE,EADFA,MAEbC,EACF,YAAIC,MAAMF,GAAOG,QAAQC,KACrB,SAAAC,GAAG,OACC,kBAAC,EAAD,CACIC,IAAKD,EACLZ,MAAOY,EACPb,YAAaC,OAI7B,OACI,yBAAKI,UAAU,aACVI,ICyBEM,G,MAtCF,SAAC,GAEO,IAAD,IADFC,KAEeC,MAAM,KAAKL,KAAI,SAAAM,GAAE,OAAIC,OAAOD,MADzC,mBACTE,EADS,KACDZ,EADC,KAGhB,GAAIa,MAAMD,IAAWC,MAAMb,GACvB,OAAO,KAGX,GAAIY,GAAU,GAAKZ,GAAS,EACxB,OAAO,KAGX,GAAIY,EAASZ,EAAQ,IACjB,OACI,0BAAMH,UAAU,SAAhB,4FAMR,IAAMI,EACF,YAAI,IAAIC,MAAMU,IAASR,KACnB,SAACU,EAAGrB,GAAJ,OACI,kBAAC,EAAD,CACIa,IAAKb,EACLA,MAAOA,EACPO,MAAOA,OAIvB,OACI,yBAAKH,UAAU,QACVI,KClBEc,G,MAdH,SAAC,GAAD,IACKP,EADL,EACKA,KACAQ,EAFL,EAEKA,aAFL,OAIR,yBAAKnB,UAAU,OACX,kEACA,2BACIoB,YAAY,gBACZC,MAAOV,EACPW,SAAUH,IACd,kBAAC,EAAD,CAAMR,KAAMA,OCcLY,E,YAzBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAiBVL,aAAe,SAACM,GACZ,EAAKC,SAAS,CACVf,KAAMc,EAAME,OAAON,SAlBvB,EAAKO,MAAQ,CACTjB,KAAM,OAHK,E,sEAOT,IACCA,EAAQkB,KAAKD,MAAbjB,KAEP,OACI,kBAAC,EAAD,CACIA,KAAMA,EACNQ,aAAcU,KAAKV,mB,GAdRW,aCOPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD6HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63b3611e.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Square = ({\n                    parentIndex,\n                    index,\n                }) => {\n    const [backgroundColor, color] =\n        (parentIndex + index) % 2 ?\n            ['white', 'black'] :\n            ['grey', 'white'];\n\n    const divStyle = {\n        backgroundColor: backgroundColor,\n        color: color,\n    };\n\n    return (\n        <div\n            className=\"Square br2 grow-large hide-child\"\n            style={divStyle}\n        >\n            <span className=\"child\">{parentIndex}, {index}</span>\n        </div>\n    );\n};\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nconst SquareRow = ({\n                       index,\n                       width,\n                   }) => {\n    const squareNodes =\n        [...Array(width).keys()].map(\n            cur =>\n                <Square\n                    key={cur}\n                    index={cur}\n                    parentIndex={index}\n                />\n        );\n\n    return (\n        <div className=\"SquareRow\">\n            {squareNodes}\n        </div>\n    );\n};\n\nexport default SquareRow;","import React from 'react';\n\nimport SquareRow from './SquareRow';\n\nimport './Grid.css';\n\nconst Grid = ({\n                  size,\n              }) => {\n    const [height, width] = size.split('x').map(el => Number(el));\n\n    if (isNaN(height) || isNaN(width)) {\n        return null;\n    }\n\n    if (height <= 0 || width <= 0) {\n        return null;\n    }\n\n    if (height * width > 10_000) {\n        return (\n            <span className=\"error\">\n                ‚ö†Ô∏è Sorry, there are too many elements to paint. Try again with a smaller size.\n            </span>\n        );\n    }\n\n    const squareNodes =\n        [...new Array(height)].map(\n            (_, index) =>\n                <SquareRow\n                    key={index}\n                    index={index}\n                    width={width}\n                />\n        );\n\n    return (\n        <div className=\"Grid\">\n            {squareNodes}\n        </div>\n    );\n};\n\nexport default Grid;","import React from 'react';\nimport 'tachyons';\n\nimport Grid from '../Grid/Grid';\n\nimport './App.css';\n\nconst App = ({\n                 size,\n                 handleChange,\n             }) => (\n    <div className=\"App\">\n        <span>üèÅ Checkerboard size :</span>\n        <input\n            placeholder=\"Up to 100x100\"\n            value={size}\n            onChange={handleChange}/>\n        <Grid size={size}/>\n    </div>\n);\n\nexport default App;\n","import React, {Component} from 'react';\n\nimport App from \"../components/App/App\";\n\n\nclass AppContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: '8x8'\n        }\n    }\n\n    render() {\n        const {size} = this.state;\n\n        return (\n            <App\n                size={size}\n                handleChange={this.handleChange}\n            />\n        )\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            size: event.target.value\n        });\n    }\n}\n\nexport default AppContainer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './containers/AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}